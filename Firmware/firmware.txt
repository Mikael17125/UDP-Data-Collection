#include Arduino.h
#include WiFi.h
#include AsyncUDP.h
#include Adafruit_MPU6050.h
#include Adafruit_Sensor.h
#include Wire.h

const char  ssid = PITAYAH lt 2;
const char  pass = enamkamar;

 I am using 4 Sliders the 5th one is not used
const int NUM_DATA= 7;
double DATA[NUM_DATA];

Adafruit_MPU6050 mpu;
AsyncUDP udp;

void setup()
{
    while (!Serial)
    delay(10);  will pause Zero, Leonardo, etc until serial console opens

  Serial.println(Adafruit MPU6050 test!);

   Try to initialize!
  if (!mpu.begin()) {
    Serial.println(Failed to find MPU6050 chip);
    while (1) {
      delay(10);
    }
  }
  Serial.println(MPU6050 Found!);

  mpu.setAccelerometerRange(MPU6050_RANGE_8_G);
  Serial.print(Accelerometer range set to );
  switch (mpu.getAccelerometerRange()) {
  case MPU6050_RANGE_2_G
    Serial.println(+-2G);
    break;
  case MPU6050_RANGE_4_G
    Serial.println(+-4G);
    break;
  case MPU6050_RANGE_8_G
    Serial.println(+-8G);
    break;
  case MPU6050_RANGE_16_G
    Serial.println(+-16G);
    break;
  }
  mpu.setGyroRange(MPU6050_RANGE_500_DEG);
  Serial.print(Gyro range set to );
  switch (mpu.getGyroRange()) {
  case MPU6050_RANGE_250_DEG
    Serial.println(+- 250 degs);
    break;
  case MPU6050_RANGE_500_DEG
    Serial.println(+- 500 degs);
    break;
  case MPU6050_RANGE_1000_DEG
    Serial.println(+- 1000 degs);
    break;
  case MPU6050_RANGE_2000_DEG
    Serial.println(+- 2000 degs);
    break;
  }

  mpu.setFilterBandwidth(MPU6050_BAND_21_HZ);
  Serial.print(Filter bandwidth set to );
  switch (mpu.getFilterBandwidth()) {
  case MPU6050_BAND_260_HZ
    Serial.println(260 Hz);
    break;
  case MPU6050_BAND_184_HZ
    Serial.println(184 Hz);
    break;
  case MPU6050_BAND_94_HZ
    Serial.println(94 Hz);
    break;
  case MPU6050_BAND_44_HZ
    Serial.println(44 Hz);
    break;
  case MPU6050_BAND_21_HZ
    Serial.println(21 Hz);
    break;
  case MPU6050_BAND_10_HZ
    Serial.println(10 Hz);
    break;
  case MPU6050_BAND_5_HZ
    Serial.println(5 Hz);
    break;
  }

     Get WiFi going
    Serial.begin(115200);
    WiFi.mode(WIFI_STA);
    WiFi.begin(ssid, pass);
    if (WiFi.waitForConnectResult() != WL_CONNECTED) {
        Serial.println(WiFi Failed);
        while(1) {
            delay(1000);
        }
    }
}

 Get slider pin values
void updateMPUValues() {
   Get new sensor events with the readings 
  sensors_event_t a, g, temp;
  mpu.getEvent(&a, &g, &temp);
  
  DATA[0] = a.acceleration.x;
  DATA[1] = a.acceleration.y;
  DATA[2] = a.acceleration.z;

  DATA[3] = g.gyro.x;
  DATA[4] = g.gyro.y;
  DATA[5] = g.gyro.z;

  DATA[7] = temp.temperature;

}

 TODO only send values if there is significant change in values to limit network traffick
 UDP Broadcast slider values
void sendMPUValues() {
  String builtString = String();

  for (int i = 0; i  NUM_DATA; i++) {
    builtString += String((double)DATA[i]);
     Build the string to broadcast by seperating values using  except for last value
    if (i  NUM_DATA - 1) {
      builtString += String();
    }
  }
   Send UDP Broadcast to 255.255.255.255 (default broadcast addr), Port 2255
  udp.broadcastTo(builtString.c_str(), 2255);
}

void loop()
{
    updateMPUValues();
    sendMPUValues();  Send data
    delay(1);
}